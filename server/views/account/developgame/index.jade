extends ../../../layouts/accountProgramPage

block head
  title Live Joystick Lab
  link(rel="stylesheet", href="https://codemirror.net/2/lib/codemirror.css")
  script(src="https://codemirror.net/2/lib/codemirror.js")
  script(src="http://codemirror.net/2/mode/javascript/javascript.js")
  script(src="//www.google.com/jsapi")
  script(src="//caja.appspot.com/caja.js")
  script(src="/views/account/developgame/complex.js")
  link(rel="stylesheet", href="https://codemirror.net/2/doc/docs.css")
  script(src="../../dependencies/tracking.js-master/build/tracking-min.js")

block neck
  style.
    .myMainRow {
      background-color:#ffffff;
      margin-top:1%;
      height:#{data.divInfo.mainRowHeight};
      width:#{data.divInfo.mainRowWidth};
      float:left;
    }

    .myMainCol {
      background-color:#ffffff;
      height:100%;
      height:#{data.divInfo.mainColHeight};
      width:#{data.divInfo.mainColWidth};
      float:left;
    }
    .myLightSpacer {
      background-color:rgba(0,0,0,0.5);
      height:#{data.divInfo.lightShort};
      width:#{data.divInfo.lightShort};
      float:left;
      text-align:center;
      border-style:solid;
      border-width:1px;
    }
    .myTopLight {
      background-color:rgba(255,255,0,#{data.lightData.topLightAlpha});
      height:#{data.divInfo.lightShort};
      width:#{data.divInfo.lightLong};
      float:left;
      text-align:center;
      border-style:solid;
      border-width:1px;
    }
    .myLeftLight {
      background-color:rgba(255,255,0,#{data.lightData.leftLightAlpha});
      height:#{data.divInfo.lightLong};
      width:#{data.divInfo.lightShort};
      float:left;
      text-align:center;
      border-style:solid;
      border-width:1px;
    }
    #myImage {
      background-color:#d3d3d3;
      height:#{data.divInfo.imageHeight};
      width:#{data.divInfo.imageWidth};
      float:left;
      overflow:hidden;
      z-index:1;
    }
    #myVideo {
      background-color:#d3d3d3;
      width:100%;      
      float:left;
      z-index:1;
    }

    #myRightLight {
      background-color:rgba(255,255,0,#{data.lightData.rightLightAlpha});
      height:#{data.divInfo.lightLong};
      width:#{data.divInfo.lightShort};
      float:left;
      text-align:center;
      border-style:solid;
      border-width:1px;
      z-index:1;
    }
    #myBottomLight {
      background-color:rgba(255,255,0,#{data.lightData.bottomLightAlpha});
      height:#{data.divInfo.lightShort};
      width:#{data.divInfo.lightLong};
      float:left;
      text-align:center;
      border-style:solid;
      border-width:1px;
      z-index:1;
    }
    #myAside {
      background-color:#ffffff;
      /*height:#{data.divInfo.asideColHeight};
      width:#{data.divInfo.asideColWidth};*/
      height: 150px;
      width: 150px;
      float:left;
      z-index:1;
    }

    #myImage2 {
      background-color:#d3d3d3;
      height:#{data.divInfo.sideImageHeight};
      width:#{data.divInfo.sideImageWidth};
      float:left;
    }
    #myJoystick {
      background-color:#A0A0A0;
      /*height:#{data.divInfo.joystickHeight};
      width:#{data.divInfo.joystickWidth};*/
      height: 150px;
      width: 150px;
      float:left;
    }

    #myScalebar {
      //- background-color:rgba(0,0,0,0.0);
      position:relative;
      height:8%;
      width:#{data.lengthScale100um};
      text-align:center;
      border-style:solid;
      border-width:0px;
      top:90%;
      left:80%;
      z-index:10;
    }

    #myScale {
      background-color:rgba(255,255,0,1);
      position:relative;
      width:100%;
      height:10px;
      text-align:center;
      border-style:solid;
      border-width:1px;
      z-index:11;
    }

    #myScaleText {
      position:absolute;
      z-index:11;
      top:55%;
      left:15%;
      font-size:16px;
      font-weight:bold;
      color:rgb(0,0,0);
    }

    .canvas-joystick-off {background-color:#A0A0A0;}
    .canvas-joystick-on {background-color:#66b2ff;}

  
    *.unselectable {
        -moz-user-select: -moz-none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    .CodeMirror {
        border: 1px solid #eee;
    }
    .CodeMirror-scroll {
      height: auto;
      overflow-y: hidden;
      overflow-x: auto;
    }
    .activeline {background: #e8f2ff !important;}

    .gameFile {padding:10px; cursor:pointer;}

block feet
  script(src='/views/account/developgame/index.js?#{cacheBreaker}')
  script(src="/views/account/developgame/Canvas_Joystick.js")
  script(src='/views/account/developgame/socket-client.js')
  script(src='/views/account/developgame/game/game.js')
  

block body
  body(onload='pageDidLoad()')

    div.row
      div.col-xs-12
        button.btn.btn-success#btnStartGame(type="update" value="update") Run Program
        |&nbsp;&nbsp;&nbsp;&nbsp;
        button.btn.btn-danger#btnStopGame(type="update" value="update") Stop Program
        |&nbsp;&nbsp;&nbsp;&nbsp;
        //-button.btn.btn-secondary#btnSandboxMode(type="update" value="update") Sandbox Mode
        //-| &nbsp;&nbsp;&nbsp;&nbsp;
        button.btn.btn-primary#btnSaveGameInitial(type="save", value="save", data-toggle="modal" data-target="#saveGameModal") Save Code
        |&nbsp;&nbsp;&nbsp;&nbsp;
        button.btn.btn-primary#btnLoadGame(type="save", value="save", data-toggle="modal" data-target="#loadGameModal") Load Code
        |&nbsp;&nbsp;&nbsp;&nbsp;
        button.btn.btn-primary#btnHideCode(type="update" value="update") Hide Code
        |&nbsp;&nbsp;&nbsp;&nbsp;
        button.btn.btn-info#btnDownloadInstructions(type="update" value="update") Participate in user study!
        |&nbsp;&nbsp;&nbsp;&nbsp;
        //-button.btn.btn-info#btnSubmitFeedback(type="update" value="update") Submit Feedback
        //-|&nbsp;&nbsp;&nbsp;&nbsp;
        font(color='black')#savedStatus Program Saved
        |&nbsp;&nbsp;|&nbsp;&nbsp;
        font(color='red')#runningStatus Stopped

        div#sandboxControls
          br
          b Sandbox Mode Controls:
          |&nbsp;&nbsp;
          button.btn.btn-primary#btnSwitchSandbox(type="update" value="update") Switch To Video Mode
          |&nbsp;&nbsp;&nbsp;&nbsp;
          button.btn.btn-danger#btnRecordVideoStream(type="update" value="update") Start Recording

    hr

    div.row
      div.col-xs-7#codeDiv
        h2#loadedProgramTxt Loaded Program: guessLedGame.peter
        font(color='purple')
          |function&nbsp;
        |BioticProgram() {
        br
        br
        div.row
          div.col-xs-11
            font(color='green')#startComment
              |&nbsp;&nbsp;&nbsp;&nbsp;/*
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* This method is called when the "Run Program" button is pressed.
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
            br
            |&nbsp;&nbsp;&nbsp;&nbsp;
            font(color='#0F6BA0')
              |this
            |.startProgram = 
            font(color='purple')
              |function
            |() {
            |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          div.col-xs-1
            img#toggleStartCodeSection(src="/media/arrow_down.jpg" width="15px")
        div.row#startCodeRow
          div.col-xs-1
          div.col-xs-11
            textarea.codeArea#txtCodeStart
              |this.xPos = -5;
              |this.yPos = MAX_SCREEN_HEIGHT;
              |this.gameInPlay = true;
              |this.wonLastGame = true;
              |&nbsp;
              |this.lastKeyPressed = null;
              |this.timeLeft = 0;
              |this.time = 0;
              |&nbsp;
              |this.level = 0;
              |&nbsp;
              |if (this.highScore === undefined) {
              |  this.highScore = 0;
              |}
              |&nbsp;
              |var EasingFunctions = {
              |  linear: function (t) { return t },
              |  easeInQuad: function (t) { return t*t },
              |  easeInCubic: function (t) { return t*t*t },
              |  easeInQuart: function (t) { return t*t*t*t },
              |  easeInQuint: function (t) { return t*t*t*t*t }
              |};
              |&nbsp;
              |this.easingFunctions = [
              |	EasingFunctions.easeInCubic,
              |    EasingFunctions.easeInQuint,
              |    EasingFunctions.easeInQuart,
              |    EasingFunctions.easeInCubic,
              |    EasingFunctions.easeInQuint,
              |    EasingFunctions.easeInQuart,
              |    EasingFunctions.easeInCubic,
              |    EasingFunctions.easeInQuint,
              |    EasingFunctions.easeInQuart,
              |    EasingFunctions.easeInCubic,
              |    EasingFunctions.easeInQuint,
              |    EasingFunctions.easeInQuart
              |];
              |&nbsp;
              |this.currentLED = LED.RIGHT;
              |&nbsp;
              |this.LEDs = [ LED.RIGHT, LED.UP, LED.DOWN, LED.LEFT ];
              |&nbsp;
        |&nbsp;&nbsp;&nbsp;&nbsp;};
        br
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        br

        div.row
          div.col-xs-11
            font(color='green')#runComment
              |&nbsp;&nbsp;&nbsp;&nbsp;/*
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* This method is the main update loop and is called approximately every millisecond.
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
            br
            |&nbsp;&nbsp;&nbsp;&nbsp;
            font(color='#0F6BA0')
              |this
            |.run =
            font(color='purple')
              |function
            |() {
            |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          div.col-xs-1
            img#toggleRunCodeSection(src="/media/arrow_down.jpg" width="15px")
        div.row#runCodeRow
          div.col-xs-1
          div.col-xs-11
            textarea#txtCodeRun
              |drawOnTrackedEuglena();
              |if (isKeyDown()) {
              |  drawRect(5, 5, MAX_SCREEN_WIDTH-5, MAX_SCREEN_HEIGHT-5, COLORS.YELLOW);
              |  drawRect(2, 2, MAX_SCREEN_WIDTH-2, MAX_SCREEN_HEIGHT-2, COLORS.YELLOW);
              |}
              |&nbsp;
              |&nbsp;
              |if (this.level < 6) {
              |  drawText("Current Score: " + this.time, 20, 50, 0.7*MAX_TEXT_SIZE, COLORS.RED);
              |&nbsp;
              |  drawText("High Score: " + this.highScore, 20, 100, 0.7*MAX_TEXT_SIZE, COLORS.RED);
              |&nbsp;
              |  drawText("Current Level: " + this.level, 20, 150, 0.7*MAX_TEXT_SIZE, COLORS.RED);
              |} else {
              |  drawText("Congrats! You win!", 100, 250, 0.7*MAX_TEXT_SIZE, COLORS.GREEN);
              |}
              |&nbsp;
              |if (this.gameInPlay === false && this.wonLastGame === false) {
              |  drawText("You hit a Euglena! Score: " + this.time + ". Press space to play again.", 100, MAX_SCREEN_HEIGHT/2, MAX_TEXT_SIZE*0.3, COLORS.GREEN);
              |} else {
              |&nbsp;
              |  this.time++;
              |  if (this.time % 1000 === 0) {
              |    this.level++;
              |  }
              |&nbsp;
              |  var changeLightFrequency = Math.floor(500.0 / this.level);
              |  if (this.time % changeLightFrequency === 0) {
              |    var led = this.LEDs[Math.floor(Math.random()*4)];
              |    if (led !== this.currentLED) {
              |      setLED(this.currentLED, 0);
              |      this.currentLED = led;
              |      setLED(led, MAX_LED_INTENSITY);
              |    }
              |  }
              |&nbsp;
              |  drawCircle(this.xPos, this.yPos, 5, COLORS.GREEN);
              |&nbsp;
              |  // Detect collisions.
              |  var euglenaPositions = getAllEuglenaPositions();
              |  for (var pos in euglenaPositions) {
              |    if (this.xPos > euglenaPositions[pos].x - 5 && this.xPos < euglenaPositions[pos].x + 5 && this.yPos > euglenaPositions[pos].y - 5 && this.yPos < euglenaPositions[pos].y + 5) {
              |      this.gameInPlay = false;
              |      this.wonLastGame = false;
              |      this.lastKeyPressed = null;
              |	  this.timeLeft = 0;
              |      if (this.time > this.highScore) {
              |        this.highScore = this.time;
              |      }
              |      this.time = 0;
              |    }
              |  }
              |}
              |&nbsp;
              |if (this.lastKeyPressed !== null && this.timeLeft >= 0) {
              |  var ease = 5 * this.easingFunctions[this.level](this.timeLeft);
              |  //console.log(ease);
              |  switch (this.lastKeyPressed) {
              |    case 'SPACE':
              |      //this.yPos -= ease;
              |      break;
              |  }
              |}
              |&nbsp;
              |if (this.xPos > MAX_SCREEN_WIDTH + 5) {
              |  this.xPos = 0;
              |}
              |if (this.xPos < -5) {
              |  this.xPos = MAX_SCREEN_WIDTH;
              |}
              |if (this.yPos > MAX_SCREEN_HEIGHT + 5) {
              |  this.yPos = 0;
              |}
              |if (this.yPos < -5) {
              |  this.yPos = MAX_SCREEN_HEIGHT;
              |}
              |&nbsp;
              |this.timeLeft -= 0.1;
              |&nbsp;
              |this.yPos += 0.25;
              |&nbsp;
              |this.xPos = (((0.05*this.level+1)) * this.time) % MAX_SCREEN_WIDTH;
        |&nbsp;&nbsp;&nbsp;&nbsp;};
        br
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        br

        div.row
          div.col-xs-11
            font(color='green')#endComment
              |&nbsp;&nbsp;&nbsp;&nbsp;/*
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* This method is called when the "Stop Program" button is pressed.
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
            br
            |&nbsp;&nbsp;&nbsp;&nbsp;
            font(color='#0F6BA0')
              |this
            |.endProgram = 
            font(color='purple')
              |function
            |() {
            |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          div.col-xs-1
            img#toggleEndCodeSection(src="/media/arrow_down.jpg" width="15px")
        div.row#endCodeRow
          div.col-xs-1
          div.col-xs-11
            textarea.codeArea#txtCodeEnd
              |setJoystickVisible(true);
              |if (this.score >= 10) alert('Guess correctly 10 times, congrats!');
        |&nbsp;&nbsp;&nbsp;&nbsp;};
        br
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        br

        div.row
          div.col-xs-11
            font(color='green')#joystickComment
              |&nbsp;&nbsp;&nbsp;&nbsp;/*
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* This method is called when the user moves the joystick.
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The angle is between 0 and 360 and the 'intensity' variable is between 0.0 and 1.0.
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
            br
            |&nbsp;&nbsp;&nbsp;&nbsp;
            font(color='#0F6BA0')
              |this
            |.onJoystickChange = 
            font(color='purple')
              |function
            |(
            font(color='blue')
              |angle, intensity
            |) {
            |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          div.col-xs-1
            img#toggleJoystickCodeSection(src="/media/arrow_down.jpg" width="15px")
        div.row#joystickCodeRow
          div.col-xs-1
          div.col-xs-11
            textarea.codeArea#txtCodeJoystick
              |var ledIntensity = intensity / 1000.0;
              |&nbsp;&nbsp;&nbsp;&nbsp;
              |log("joystick pressed" +  angle + "/" + intensity);
              |if (angle >= 45 && angle < 135) {
              |&nbsp;&nbsp;&nbsp;&nbsp;setLED(LED.UP, ledIntensity);
              |} else if (angle >= 135 && angle < 225) {
              |&nbsp;&nbsp;&nbsp;&nbsp;setLED(LED.RIGHT, ledIntensity);
              |} else if (angle >= 225 && angle < 315) {
              |&nbsp;&nbsp;&nbsp;&nbsp;setLED(LED.DOWN, ledIntensity);
              |} else if (angle >= 315 && angle <= 360 &&
              |&nbsp;&nbsp;&nbsp;&nbsp;angle < 45 && angle >= 0) {
              |&nbsp;&nbsp;&nbsp;&nbsp;setLED(LED.LEFT, ledIntensity);
              |} 
        |&nbsp;&nbsp;&nbsp;&nbsp;};
        br
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        br

        div.row
          div.col-xs-11
            font(color='green')#keypressComment
              |&nbsp;&nbsp;&nbsp;&nbsp;/*
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* This method is fired whenever the user presses a key on the keyboard.
              br
              |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
            br
            |&nbsp;&nbsp;&nbsp;&nbsp;
            font(color='#0F6BA0')
              |this
            |.onKeypress = 
            font(color='purple')
              |function
            |(
            font(color='blue')
              |key
            |) {
            |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          div.col-xs-1
            img#toggleKeypressCodeSection(src="/media/arrow_down.jpg" width="15px")
        div.row#keypressCodeRow
          div.col-xs-1
          div.col-xs-11
            textarea.codeArea#txtCodeKeypress
              |switch (key) {
              |  case KEY.A:
              |    this.lastKeyPressed = 'A';
              |    this.yPos -= 15;
              |    break;
              |  case KEY.SPACE:
              |    this.xPos = MAX_SCREEN_WIDTH / 2;
              |	this.yPos = MAX_SCREEN_HEIGHT;
              |    this.gameInPlay = true;
              |    this.wonLastGame = true;
              |    this.lastKeyPressed = null;
              |	this.timeLeft = 0;
              |	this.time = 0;
              |    if (this.time > this.highScore) {
              |      this.highScore = this.time;
              |    }
              |    break;
              |}
              |this.timeLeft = 1;
        |&nbsp;&nbsp;&nbsp;&nbsp;};
        br
        br
        |&nbsp;&nbsp;&nbsp;&nbsp;
        button#loadHelperFunctionButton(type="button" class="btn btn-primary" data-toggle="modal" data-target="#loadHelperFunctionModal" ) Load Helper Function
        |&nbsp;&nbsp;&nbsp;&nbsp;
        button#saveHelperFunctionButton(type="button" class="btn btn-primary" data-toggle="modal" data-target="#saveHelperFunctionModal" ) Write Helper Function
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        br
        div#helperFunctionArea
          div.row
            div.col-xs-11
              br
              font(color='purple')
                |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;
              font(color='black')#helperNameText
                |helperFunction
              |&nbsp;=&nbsp;
              font(color='purple')
                |function
              |(
              font(color='black')#helperArgsText
                |arg1, arg2
              |)&nbsp;{
            div.col-xs-1
              img#toggleHelperCodeSection(src="/media/arrow_down.jpg" width="15px")
          div.row#helperCodeRow
            div.col-xs-1
            div.col-xs-11
              textarea#txtCodeHelper
                |&nbsp;
          |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
        br
        br
        |};
        br
        br
        |README:
        br
        textarea#txtCodeREADME
        
      div.col-xs-5#programDiv
        canvas(id="display", width="640", height="480")
        p#instructionText
          |&nbsp;
        h3#labTimeLeftLabel.unselectable(name=data.timeLeftInLab.jadeName) #{data.timeLeftInLab.value}
        div.row#apiCalls
          div#apiInfo.col-xs-11
            font(color="black") 
              //-h2 EuglenaScript API Calls
              a(href="https://www.w3schools.com/jsref/", target="_blank", style="color:blue") Here
              |&nbsp;is a good JavaScript reference.
              br
              br

              button#drawingFunctionsButton(type="button" class="btn btn-primary" data-toggle="collapse" data-target="#drawingFunctions") Show drawing functions
              div#drawingFunctions.collapse

                br

                b drawOnTrackedEuglena
                |(
                i 
                |)
                br
                |Draw a virtual object over each tracked euglena.
                br
                i Example: drawOnTrackedEuglena();

                br
                br

                b drawCircle
                |(
                i xCenter, yCenter, radius, color
                |)
                br
                |Input(s):
                br
                i xCenter
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i yCenter
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i radius
                |, a number
                br
                i color
                |, one of COLORS.RED, COLORS.BLUE, COLORS.GREEN, COLORS.BLACK, COLORS.WHITE, COLORS.PURPLE, COLORS.YELLOW, or COLORS.ORANGE.
                br
                |Draw circle with center (xCenter, yCenter) with radius and specified color. This function must be called in the run() event handler.
                br
                i Example: drawCircle(200, 200, 30, COLORS.RED);

                br
                br

                b drawLine
                |(
                i x1, y1, x2, y2, color
                |)
                br
                |Input(s):
                br
                i x1
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i y1
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i x2
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i y2
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i color
                |, one of COLORS.RED, COLORS.BLUE, COLORS.GREEN, COLORS.BLACK, COLORS.WHITE, COLORS.PURPLE, COLORS.YELLOW, or COLORS.ORANGE.
                br
                |Draw line from (x1,y1) to (x2,y2) with specified color. This function must be called in the run() event handler.
                br
                i Example: drawLine(20, 20, 50, 50, COLORS.GREEN);

                br
                br

                b drawRect
                |(
                i upperLeftX, upperLeftY, lowerRightX, lowerRightY, color
                |)
                br
                |Input(s):
                br
                i upperLeftX
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i upperLeftY
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i lowerRightX
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i lowerRightY
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i color
                |, one of COLORS.RED, COLORS.BLUE, COLORS.GREEN, COLORS.BLACK, COLORS.WHITE, COLORS.PURPLE, COLORS.YELLOW, or COLORS.ORANGE.
                br
                |Draw a virtual rectangle defined by the top left coordinate (upperLeftX, upperLeftY) and the bottom right coordinate (lowerRightX, lowerRightY) wand the specified color. This function must be called in the run() event handler.
                br
                i Example: drawRect(20, 20, MAX_SCREEN_WIDTH-20, MAX_SCREEN_HEIGHT-20, 100, COLORS.ORANGE);

                br
                br

                b drawText
                |(
                i text, xPos, yPos, size, color
                |)
                br
                |Input(s):
                br
                i text
                |, a string
                br
                i xPos
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i yPos
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i size
                |, a number between 0 and MAX_TEXT_SIZE
                br
                i color
                |, one of COLORS.RED, COLORS.BLUE, COLORS.GREEN, COLORS.BLACK, COLORS.WHITE, COLORS.PURPLE, COLORS.YELLOW, or COLORS.ORANGE.
                br
                |Draw text as position (xPos, yPos) with the specified color. This function must be called in the run() event handler.
                br
                i Example: drawText("Hello, world!", MAX_SCREEN_WIDTH/2, 200, 0.5*MAX_TEXT_SIZE, COLORS.ORANGE);

              br
              br

              button#trackingFunctionsButton(type="button" class="btn btn-primary" data-toggle="collapse" data-target="#trackingFunctions") Show Euglena tracking functions
              div#trackingFunctions.collapse

                br

                b getAllEuglenaIDs
                |()
                br
                |Return an array of all of the currently tracked Euglena IDs.
                br
                |Returns: an array of integers
                br
                i 
                  |Example: 
                  br
                  |var euglenaIDs = getAllEuglenaIDs(); 
                  br
                  |for (var i = 0; i < euglenaIDs.length; i++) {
                  br
                  |&nbsp;&nbsp;&nbsp;&nbsp;console.log('ID: ' + euglenaIDs[i]);
                  br
                  |}


                br
                br

                b getAllEuglenaPositions
                |()
                br
                |Return an array of objects that contain (x, y) coordinates of all tracked Euglena positions.
                br
                |Returns: an array of objects that contain the (x, y) coordinates
                br
                i Example: var euglenaPositions = getAllEuglenaPositions();

                br
                br

                b getEuglenaCount
                |()
                br
                |Get the total Euglena count.
                br
                |Returns: a number
                br
                i Example: getEuglenaCount();

                br
                br

                b getEuglenaInRect
                |(
                i upperLeftX, upperLeftY, lowerRightX, lowerRightY
                |)
                br
                |Input(s):
                br
                i upperLeftX
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i upperLeftY
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                i lowerRightX
                |, a number between 0 and MAX_SCREEN_WIDTH
                br
                i lowerRightY
                |, a number between 0 and MAX_SCREEN_HEIGHT
                br
                |Get a list of IDs of all Euglenas in the rectangle defined by the top left coordinate (upperLeftX, upperLeftY) and the bottom right coordiante (lowerRightX, lowerRightY).
                br
                |Returns: a list of numbers
                br
                i 
                  |Example: 
                  br
                  |var euglenasInRect = getEuglenaInRect(0, 0, 100, 100); 
                  br
                  |for (var i = 0; i < euglenasInRect.length; i++) {
                  br
                  |&nbsp;&nbsp;&nbsp;&nbsp;console.log('ID: ' + euglenasInRect[i]);
                  br
                  |}

                br
                br

                b getEuglenaAcceleration
                |(
                i id
                |)
                br
                |Input(s):
                br
                i id
                |, a number
                br
                |Get the acceleration (in microns per second squared) of the Euglena based on Euglena ID.
                br
                |Returns: a number
                br
                i 
                  |Example:
                  br
                  |var euglenaIDs = getAllEuglenaIDs(); 
                  br
                  |for (var i = 0; i < euglenaIDs.length; i++) {
                  br
                  |&nbsp;&nbsp;&nbsp;&nbsp;console.log('ID: ' + euglenaIDs[i] + ', Acceleration: ' + getEuglenaAcceleration(euglenaIDs[i]));
                  br
                  |}

                br
                br

                b getEuglenaPosition
                |(
                i id
                |)
                br
                |Input(s):
                br
                i id
                |, a number
                br
                |Get an object containing the X and Y position of the Euglena based on Euglena ID.
                br
                |Returns: a number
                br
                i 
                  |Example:
                  br
                  |var euglenaIDs = getAllEuglenaIDs(); 
                  br
                  |for (var i = 0; i < euglenaIDs.length; i++) {
                  br
                  |&nbsp;&nbsp;&nbsp;&nbsp;console.log('ID: ' + euglenaIDs[i] + ', X-position: ' + getEuglenaPosition(euglenaIDs[i]).x);
                  br
                  |}

                br
                br

                b getEuglenaRotation
                |(
                i id
                |)
                br
                |Input(s):
                br
                i id
                |, a number
                br
                |Get the rotation (in degrees) of the Euglena based on Euglena ID.
                br
                |Returns: a number
                br
                i
                  |Example: 
                  br
                  |var euglenaIDs = getAllEuglenaIDs(); 
                  br
                  |for (var i = 0; i < euglenaIDs.length; i++) {
                  br
                  |&nbsp;&nbsp;&nbsp;&nbsp;console.log('ID: ' + euglenaIDs[i] + ', Rotation: ' + getEuglenaRotation(euglenaIDs[i]));
                  br
                  |}

                br
                br

                b getEuglenaVelocity
                |(
                i id
                |)
                br
                |Input(s):
                br
                i id
                |, a number
                br
                |Get the velocity (in microns per second) of the Euglena based on Euglena ID.
                br
                |Returns: a number
                br
                i 
                  |Example: 
                  br
                  |var euglenaIDs = getAllEuglenaIDs(); 
                  br
                  |for (var i = 0; i < euglenaIDs.length; i++) {
                  br
                  |&nbsp;&nbsp;&nbsp;&nbsp;console.log('ID: ' + euglenaIDs[i] + ', Velocity: ' + getEuglenaVelocity(euglenaIDs[i]));
                  br
                  |}

              br
              br

              button#programControlFunctionsButton(type="button" class="btn btn-primary" data-toggle="collapse" data-target="#programControlFunctions") Show program control functions
              div#programControlFunctions.collapse

                br

                b endProgram
                |()
                br
                |Ends the program.
                br
                i Example: endProgram();

                br
                br

                b getTimeLeft
                |()
                br
                |Get the time left in the session, in seconds.
                br
                |Returns: a number
                br
                i Example: var remainTime = getTimeLeft();

                br
                br

                b setJoystickVisible
                |(
                i isOn
                |)
                br
                |Input(s):
                br
                i isOn
                |, a boolean
                br
                |Turn the joystick view on or off.
                br
                |Returns: a number
                br
                i Example: setJoystickVisible(true);

                br
                br

                b setInstructionText
                |(
                i message
                |)
                br
                |Input(s):
                br
                i message
                |, a string
                br
                |Change the text in the "instructions" section of the screen.
                br
                i Example: setInstructionText("Hello!");

              br
              br

              button#euglenaControlFunctionsButton(type="button" class="btn btn-primary" data-toggle="collapse" data-target="#euglenaControlFunctions") Show Euglena control functions
              div#euglenaControlFunctions.collapse

                br

                b setLED
                |(
                i led, intensity
                |)
                br
                |Input(s):
                br
                i led
                |, one of LED.RIGHT, LED.LEFT, LED.UP, and LED.DOWN
                br
                |Set led to the intensity between 0 (completely off) and MAX_LED_INTENSITY (completely on).
                br
                i Example: setLED(LED.RIGHT, 0.8*MAX_LED_INTENSITY);

              br
              br

              button#fileFunctionsButton(type="button" class="btn btn-primary" data-toggle="collapse" data-target="#fileFunctions") Show file functions
              div#fileFunctions.collapse

                br

                b readFromFile
                |(
                i filename
                |)
                br
                |Input(s):
                br
                i filename
                |, a string
                br
                |Get the string contained in filename.
                br
                |Returns: a string
                br
                i Example: var fileContents = readFromFile("log.txt");

                br
                br

                b writeToFile
                |(
                i filename, text, mode
                |)
                br
                |Input(s):
                br
                i filename
                |, a string
                br
                i text
                |, a string
                br
                i mode
                |, one of FILE.OVERWRITE or FILE.APPEND
                br
                |Write text into filename, in either overwrite mode (where the old file with the same name has text written over it) or append mode (where text is added to an existing file).
                br
                i Example: writeToFile("hello.txt", "Hello!", FILE.OVERWRITE);

              br
              br

              button#showConstantsButton(type="button" class="btn btn-primary" data-toggle="collapse" data-target="#showConstants") Show constants
              div#showConstants.collapse

                br

                |MAX_ANGLE: The highest angle (360) the joystick can turn.
                br
                br
                |MAX_INTENSITY: The highest intensity the joystick can have.
                br
                br
                |MAX_SCREEN_WIDTH: The maximum screen width of the microscope video view.
                br
                br
                |MAX_SCREEN_HEIGHT: The maximum screen height of the microscope video view.
                br
                br
                |The valid colors are COLORS.RED, COLORS.BLUE, COLORS.GREEN, COLORS.BLACK, COLORS.WHITE, COLORS.PURPLE, COLORS.YELLOW, and COLORS.ORANGE.

          div.col-xs-1
            div.row
              div.col-xs-12#myAside.unselectable(name='myAside')
                div#myJoystick.canvas-joystick-off(name='myJoystick')
            
    
    div.modal.fade(role="dialog")

    div.modal.fade#demographicDataModal(role="dialog")
      div.modal-dialog
        div.modal-content
          div.modal-header
            button.close(type="button", data-dismiss="modal")
            h4.modal-title
              |EuglenaScript Study Survey
          div.modal-body
            div.form-group
              label(for="usr") Your full name:
              input.form-control.demographicData#userNameText(type="text")
              br
              label(for="usr") Your age:
              input.form-control.demographicData#userAgeText(type="number")
              br
              label(for="usr") What is your programming experience on a scale of 0 (no experience) to 5 (expert)?
              br
              div.control-group
                div.controls.radio-group
                  label.radio-inline.control-label
                    input#prog0.demographicData(type="radio" name="optradio" value="0")
                    |0&nbsp;
                  label.radio-inline.control-label
                    input#prog1.demographicData(type="radio" name="optradio" value="1")
                    |1&nbsp;
                  label.radio-inline.control-label
                    input#prog2.demographicData(type="radio" name="optradio" value="2")
                    |2&nbsp;
                  label.radio-inline.control-label
                    input#prog3.demographicData(type="radio" name="optradio" value="3")
                    |3&nbsp;
                  label.radio-inline.control-label
                    input#prog4.demographicData(type="radio" name="optradio" value="4")
                    |4&nbsp;
                  label.radio-inline.control-label
                    input#prog5.demographicData(type="radio" name="optradio" value="5")
                    |5&nbsp;
              br
              br
              label(for="usr") What is your JavaScript experience on a scale of 0 (no experience) to 5 (expert)?
              br
              div.control-group
                div.controls.radio-group
                  label.radio-inline.control-label
                    input#js0.demographicData(type="radio" name="optradio2" value="0")
                    |0&nbsp;
                  label.radio-inline.control-label
                    input#js1.demographicData(type="radio" name="optradio2" value="1")
                    |1&nbsp;
                  label.radio-inline.control-label
                    input#js2.demographicData(type="radio" name="optradio2" value="2")
                    |2&nbsp;
                  label.radio-inline.control-label
                    input#js3.demographicData(type="radio" name="optradio2" value="3")
                    |3&nbsp;
                  label.radio-inline.control-label
                    input#js4.demographicData(type="radio" name="optradio2" value="4")
                    |4&nbsp;
                  label.radio-inline.control-label
                    input#js5.demographicData(type="radio" name="optradio2" value="5")
                    |5&nbsp;
              br
              br
              label(for="usr") What is your biology experience on a scale of 0 (no experience) to 5 (expert)?
              br
              div.control-group
                div.controls.radio-group
                  label.radio-inline.control-label
                    input#bio0.demographicData(type="radio" name="optradio3" value="0")
                    |0&nbsp;
                  label.radio-inline.control-label
                    input#bio1.demographicData(type="radio" name="optradio3" value="1")
                    |1&nbsp;
                  label.radio-inline.control-label
                    input#bio2.demographicData(type="radio" name="optradio3" value="2")
                    |2&nbsp;
                  label.radio-inline.control-label
                    input#bio3.demographicData(type="radio" name="optradio3" value="3")
                    |3&nbsp;
                  label.radio-inline.control-label
                    input#bio4.demographicData(type="radio" name="optradio3" value="4")
                    |4&nbsp;
                  label.radio-inline.control-label
                    input#bio5.demographicData(type="radio" name="optradio3" value="5")
                    |5&nbsp;
            br
            button.btn.btn-primary#btnSaveDemographics(type="save", value="save", data-dismiss="modal", disabled) Submit Data


    div.modal.fade#saveGameModal(role="dialog")
      div.modal-dialog
        div.modal-content
          div.modal-header
            button.close(type="button", data-dismiss="modal")
            h4.modal-title
              |Save Program
          div.modal-body
            div.form-group
              label(for="usr") Program file name:
              input.form-control#gameNameText(type="text")
            br
            button.btn.btn-primary#btnSaveGame(type="save", value="save", data-toggle="modal" data-target="#saveGameModal") Save Program
          div.modal-footer
            button.btn.btn-default(type="button", data-dismiss="modal") Close


    div.modal.fade#saveHelperFunctionModal(role="dialog")
      div.modal-dialog
        div.modal-content
          div.modal-header
            button.close(type="button", data-dismiss="modal")
            h4.modal-title
              |Save Helper Function
          div.modal-body
            div.form-group
              label(for="usr") Helper function name:
              input.form-control.demographicData#helperFunctionNameInput(type="text")
              br
              label(for="usr") Helper function arguments (comma-separated):
              input.form-control.demographicData#helperFunctionArgsInput(type="text")
              br
            button.btn.btn-primary#btnSaveHelper(type="save", value="save", data-toggle="modal" data-target="#saveHelperFunctionModal") Save Helper Function
          div.modal-footer
            button.btn.btn-default(type="button", data-dismiss="modal") Close

    div.modal.fade#loadHelperFunctionModal(role="dialog")
      div.modal-dialog
        div.modal-content
          div.modal-header
            button.close(type="button", data-dismiss="modal")
            h4.modal-title
              |Choose Saved Helper Function
          div.modal-body
            div.dropdown
              button.btn.btn-default.dropdown-toggle(type="button" data-toggle="dropdown") Select A Function
                span.caret
              ul.dropdown-menu#existingHelperFunctionsDropdown
                - for (var j=0; j < data.helperFunctionNames.split('%3B').length; j++)
                  - if (data.helperFunctionNames.split('%3B')[j] !== '%22')
                    li.helperFile
                      a(href="#") 
                        | #{data.helperFunctionNames.split('%3B')[j]}
            br
          div.modal-footer
            button.btn.btn-default(type="button", data-dismiss="modal") Close

    div.modal.fade#loadGameModal(role="dialog")
      div.modal-dialog
        div.modal-content
          div.modal-header
            button.close(type="button", data-dismiss="modal")
            h4.modal-title
              |Choose Program
          div.modal-body
            div.dropdown
              button.btn.btn-default.dropdown-toggle(type="button" data-toggle="dropdown") Select A Program
                span.caret
              ul.dropdown-menu#existingGamesDropdown
                - for (var j=0; j < data.gameNames.split('%3B').length; j++)
                  - if (data.gameNames.split('%3B')[j] !== '%22')
                    li.gameFile
                      a(href="#") 
                        | #{data.gameNames.split('%3B')[j]}
            br
          div.modal-footer
            button.btn.btn-default(type="button", data-dismiss="modal") Close

    script(type='text/template',id="tmpl-survey")
      div.modal-dialog(role="document")
        div.modal-content
          div.modal-header
              h4.modal-title Send us your feedback
          div.modal-body
            .form-group
                label Rate your experience
                div
                    input.form-control.rating(type="hidden",name="rating")
            .form-group
                label Note for support team
                textarea.form-control(rows="5",style="width:520px", name="notes")
          div.modal-footer
            button.btn.btn-primary#btn-submit(type="submit",value="submit") Submit  
            button.btn.btn-default#btn-close(type="button",value="close", data-dismiss="modal") Close  
      

    script(type='text/lab', id='data-user') !{data.user}
    script(type='text/lab', id='data-bpu') !{data.bpu}
    script(type='text/lab', id='data-bpuExp') !{data.bpuExp}
    script(type='text/template', id='data-session') !{data.session}
    script(type='text/lab', id='data-setLedsObj') !{data.setLedsObj}

    script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js", type="text/javascript")
    script(src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js", type="text/javascript")
    script(src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js", type="text/javascript")



